{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from 'next-auth'\nimport CredentialsProvider from 'next-auth/providers/credentials'\nimport type { NextAuthOptions } from 'next-auth'\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    CredentialsProvider({\n      name: 'credentials',\n      credentials: {\n        email: { label: 'Email', type: 'email' },\n        password: { label: 'Password', type: 'password' }\n      },\n      async authorize(credentials) {\n        try {\n          // For demo purposes, we'll use hardcoded credentials\n          // In production, you would validate against a database\n          if (credentials?.email === 'demo@studynotes.com' && credentials?.password === 'demo123') {\n            return {\n              id: '1',\n              email: 'demo@studynotes.com',\n              name: 'Demo User',\n            }\n          }\n          \n          // You can add more demo users here\n          if (credentials?.email === 'student@example.com' && credentials?.password === 'student123') {\n            return {\n              id: '2',\n              email: 'student@example.com',\n              name: 'Student User',\n            }\n          }\n          \n          return null\n        } catch (error) {\n          console.error('Authentication error:', error)\n          return null\n        }\n      }\n    })\n  ],\n  pages: {\n    signIn: '/login',\n  },\n  callbacks: {\n    async jwt({ token, user }) {\n      try {\n        if (user) {\n          token.id = user.id\n        }\n        return token\n      } catch (error) {\n        console.error('JWT callback error:', error)\n        return token\n      }\n    },\n    async session({ session, token }) {\n      try {\n        if (token && session.user) {\n          (session.user as any).id = token.id as string\n        }\n        return session\n      } catch (error) {\n        console.error('Session callback error:', error)\n        return session\n      }\n    },\n  },\n  session: {\n    strategy: 'jwt',\n  },\n  secret: process.env.NEXTAUTH_SECRET || 'your-secret-key-here',\n}\n\nconst handler = NextAuth(authOptions)\n\nexport { handler as GET, handler as POST }\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAGO,MAAM,cAA+B;IAC1C,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI;oBACF,qDAAqD;oBACrD,uDAAuD;oBACvD,IAAI,aAAa,UAAU,yBAAyB,aAAa,aAAa,WAAW;wBACvF,OAAO;4BACL,IAAI;4BACJ,OAAO;4BACP,MAAM;wBACR;oBACF;oBAEA,mCAAmC;oBACnC,IAAI,aAAa,UAAU,yBAAyB,aAAa,aAAa,cAAc;wBAC1F,OAAO;4BACL,IAAI;4BACJ,OAAO;4BACP,MAAM;wBACR;oBACF;oBAEA,OAAO;gBACT,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,yBAAyB;oBACvC,OAAO;gBACT;YACF;QACF;KACD;IACD,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI;gBACF,IAAI,MAAM;oBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBACpB;gBACA,OAAO;YACT,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,uBAAuB;gBACrC,OAAO;YACT;QACF;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI;gBACF,IAAI,SAAS,QAAQ,IAAI,EAAE;oBACxB,QAAQ,IAAI,CAAS,EAAE,GAAG,MAAM,EAAE;gBACrC;gBACA,OAAO;YACT,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,2BAA2B;gBACzC,OAAO;YACT;QACF;IACF;IACA,SAAS;QACP,UAAU;IACZ;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe,IAAI;AACzC;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}}]
}