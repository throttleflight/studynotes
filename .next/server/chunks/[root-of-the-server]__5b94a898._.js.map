{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/airpl/Documents/studynotes/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from 'next-auth'\r\nimport CredentialsProvider from 'next-auth/providers/credentials'\r\nimport type { NextAuthOptions } from 'next-auth'\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: 'credentials',\r\n      credentials: {\r\n        email: { label: 'Email', type: 'email' },\r\n        password: { label: 'Password', type: 'password' }\r\n      },\r\n      async authorize(credentials) {\r\n        try {\r\n          // For demo purposes, we'll use hardcoded credentials\r\n          // In production, you would validate against a database\r\n          if (credentials?.email === 'demo@studynotes.com' && credentials?.password === 'demo123') {\r\n            return {\r\n              id: '1',\r\n              email: 'demo@studynotes.com',\r\n              name: 'Demo User',\r\n            }\r\n          }\r\n          \r\n          // You can add more demo users here\r\n          if (credentials?.email === 'student@example.com' && credentials?.password === 'student123') {\r\n            return {\r\n              id: '2',\r\n              email: 'student@example.com',\r\n              name: 'Student User',\r\n            }\r\n          }\r\n          \r\n          return null\r\n        } catch (error) {\r\n          console.error('Authentication error:', error)\r\n          return null\r\n        }\r\n      }\r\n    })\r\n  ],\r\n  pages: {\r\n    signIn: '/login',\r\n  },\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      try {\r\n        if (user) {\r\n          token.id = user.id\r\n        }\r\n        return token\r\n      } catch (error) {\r\n        console.error('JWT callback error:', error)\r\n        return token\r\n      }\r\n    },\r\n    async session({ session, token }) {\r\n      try {\r\n        if (token && session.user) {\r\n          // Extend session.user type safely without using any\r\n          (session.user as { id?: string }).id = token.id as string\r\n        }\r\n        return session\r\n      } catch (error) {\r\n        console.error('Session callback error:', error)\r\n        return session\r\n      }\r\n    },\r\n  },\r\n  session: {\r\n    strategy: 'jwt',\r\n  },\r\n  secret: process.env.NEXTAUTH_SECRET || 'your-secret-key-here',\r\n}\r\n\r\nconst handler = NextAuth(authOptions)\r\n\r\nexport { handler as GET, handler as POST }\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAGO,MAAM,cAA+B;IAC1C,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI;oBACF,qDAAqD;oBACrD,uDAAuD;oBACvD,IAAI,aAAa,UAAU,yBAAyB,aAAa,aAAa,WAAW;wBACvF,OAAO;4BACL,IAAI;4BACJ,OAAO;4BACP,MAAM;wBACR;oBACF;oBAEA,mCAAmC;oBACnC,IAAI,aAAa,UAAU,yBAAyB,aAAa,aAAa,cAAc;wBAC1F,OAAO;4BACL,IAAI;4BACJ,OAAO;4BACP,MAAM;wBACR;oBACF;oBAEA,OAAO;gBACT,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,yBAAyB;oBACvC,OAAO;gBACT;YACF;QACF;KACD;IACD,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI;gBACF,IAAI,MAAM;oBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBACpB;gBACA,OAAO;YACT,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,uBAAuB;gBACrC,OAAO;YACT;QACF;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI;gBACF,IAAI,SAAS,QAAQ,IAAI,EAAE;oBACzB,oDAAoD;oBACnD,QAAQ,IAAI,CAAqB,EAAE,GAAG,MAAM,EAAE;gBACjD;gBACA,OAAO;YACT,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,2BAA2B;gBACzC,OAAO;YACT;QACF;IACF;IACA,SAAS;QACP,UAAU;IACZ;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe,IAAI;AACzC;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}}]
}